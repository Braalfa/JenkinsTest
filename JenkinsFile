node {
    stage('Initialize') {
            //enable remote triggers
            //define scm connection for polling
            git changelog: true, poll: true, url: 'https://github.com/brayan156/JenkinsTest'
    }
    stage ('Prepare') {

        catchError {
            sshagent(credentials : ['teamsoakey']){
            sh "ssh -o StrictHostKeyChecking=no teamsoa@168.62.39.210 pm2 delete 1"}
        }
        catchError {
            sshagent(credentials : ['teamsoakey']){
            sh "ssh -o StrictHostKeyChecking=no teamsoa@168.62.39.210 pm2 delete 0"}
        }
    }
    stage('SonarCloud') {
        environment {
             SCANNER_HOME = tool 'sonarscan'
             ORGANIZATION = "brayan156"
             PROJECT_NAME = "brayan156_JenkinsTest"
        }
        sh "echo “$SCANNER_HOME”"
            withSonarQubeEnv('SonarQube') {
                sh '''$SCANNER_HOME/bin/sonar-scanner --version -Dsonar.organization=$ORGANIZATION \
                -Dsonar.java.binaries=build/classes/java/ \
                -Dsonar.projectKey=$PROJECT_NAME \
                -Dsonar.sources=.'''
            
        }
    }

    stage ('Code_analyse') {
        sh "echo “Run some lints”"
    }
    stage ('Unit_test') {
        sh "echo “Tests will back”"
    }
    stage ('Build') {
        sh "echo “Tests will back”"
    }
    stage ('Deploy') {
        sshagent(credentials : ['teamsoakey']){
        sh 'ssh -o StrictHostKeyChecking=no teamsoa@168.62.39.210 "cd JenkinsTest && git pull"'
        sh 'ssh -o StrictHostKeyChecking=no teamsoa@168.62.39.210 "cd JenkinsTest/api/myapp && export PORT=5000 && pm2 --name api start npm -- start"'
        sh 'ssh -o StrictHostKeyChecking=no teamsoa@168.62.39.210 "cd JenkinsTest/frontend/myapp && export PORT=3000 && pm2 --name frontend start npm -- start"'
        }
    }
   currentBuild.result = 'SUCCESS'
   return
}